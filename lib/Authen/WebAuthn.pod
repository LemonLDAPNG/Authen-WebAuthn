# PODNAME: Authen::WebAuthn
# ABSTRACT: A library to add Web Authentication support to server applications

=head1 SYNOPSIS

This module lets you validate L<Web Authentication|https://www.w3.org/TR/webauthn/> registration and authentication responses.

Currently, it does not handle the generation of registration and authentication requests.

The transmission of requests and responses from the application server to the
user's browser, and interaction with the WebAuthn browser API is also out of
scope and could be handled by a dedicated JS library.

To register a new device:

    # Obtain registration response from web browser
    # Then,
    my $webauthn_rp = Authen::WebAuthn->new(
        rp_id  => "app.example.com",
        origin => "https://app.example.com"
    );

    my $registration_result = eval {
        $webauthn_rp->validate_registration(
            challenge_b64          => ... ,
            requested_uv           => ... ,
            client_data_json_b64   => ... ,
            attestation_object_b64 => ... ,
            token_binding_id_b64   => ... ,
        )
    };
    if ($@) {
        die "Error validating registration: $@";
    }

To authenticate a user:

    # Obtain authentication response from web browser
    # Then,
    my $webauthn_rp = Authen::WebAuthn->new(
        rp_id  => "app.example.com",
        origin => "https://app.example.com"
    );

    my $validation_result = eval {
        $webauthn_rp->validate_assertion(
            challenge_b64          => ...,
            credential_pubkey_b64  => ...,
            stored_sign_count      => ...,
            requested_uv           => ...,
            client_data_json_b64   => ...,
            authenticator_data_b64 => ...,
            signature_b64          => ...,
            extension_results      => ...,
            token_binding_id_b64   => ...,
        )
    };
    if ($@) {
        die "Error validating authentication: $@";
    }

=attr rp_id

The identifier of your Relying Party. Usually, this is set to the domain
name over which your application is accessed (app.example.com).

=attr origin

The origin, as defined by the HTML standard, that your Relying Party is
expecting to find in registration or authentication responses. This must
contain the scheme and port of your application, but no path
(http://app.example.com:8080 or https://app.example.com)


=method validate_registration

This method validates the registration response emitted by the authenticator.

It takes the following named arguments

=over 4

=item challenge_b64

The base64url-encoded challenge that was submitted to the authenticator

=item requested_uv

Whether or not the Relying Party required user verification for this operation.
Possible values are C<required>, C<preferred>, C<discouraged>.

=item client_data_json_b64

The base64url-encoded client data received from the authenticator

=item attestation_object_b64

The base64url-encoded attestation object received from the authenticator

=item token_binding_id_b64

The base64url-encoded Token Binding ID for the current connection. Usually this
comes from a C<Sec-Provided-Token-Binding-ID> HTTP header. If you are not using
Token Binding, you can omit this parameter.

=back

This method croaks on errors. If the registration was successful, it returns a hashref with the following subkeys:

=over 4

=item credential_id

The base64url-encoded credential ID for this authenticator

=item credential_pubkey

The base64url-encoded public key for this authenticator, in COSE format

=item signature_count

The initial signature count of this authenticator

=back

This information is supposed to be persisted in the Relying Party, usually in some sort of database

=method validate_assertion

This method validates the registration response emitted by the authenticator.

It takes the following named arguments

=over 4

=item challenge_b64

The base64url-encoded challenge that was submitted to the authenticator

=item credential_pubkey_b64

The base64url-encoded credential public key corresponding to the received Credential ID

=item stored_sign_count

The current signature count in the Relying Party's database. Set it to 0 to
disable verification of the signature count

=item requested_uv

Whether or not the Relying Party required user verification for this operation.
Possible values are C<required>, C<preferred>, C<discouraged>.

=item client_data_json_b64

The base64url-encoded client data received from the authenticator

=item authenticator_data_b64

The base64url-encoded authenticator data received from the authenticator

=item signature_b64

The base64url-encoded signature received from the authenticator

=item extension_results

A hashref containing extension results received from the authenticator

=item token_binding_id_b64

The base64url-encoded Token Binding ID for the current connection. Usually this
comes from a C<Sec-Provided-Token-Binding-ID> HTTP header. If you are not using
Token Binding, you can omit this parameter.

=back

This method croaks on errors. If the registration was successful, it returns a
hashref with the following subkeys:

=over 4

=item signature_count

The new signature count, to be updated in the Relying Party's database

=back

=method convert_raw_ecc_to_cose

    my $cose_b64 = Authen::WebAuthn::convert_raw_ecc_to_cose($u2f_b64);

This method takes the base64url-encoded raw ECC key (U2F format) and converts
it to a base64url-encoded COSE representation. It can be useful for converting
existing U2F device registration to WebAuthen device registrations in your
Relying Party.


=head1 CAVEAT

This module only supports the "None" attestation type at the moment, which
means Relying Parties cannot have a strong guarantee of the authenticator's
security properties. This makes it possible for users to register weak
authenticators.

Because of that, is it not recommended to use this module in passwordless
authentication scenarios. However, it should be good enough for using security
keys as a second factor.

This limitation may be addressed in a future version.

=head1 SEE ALSO

=over 4

=item L<W3C Web Authentication specification|https://www.w3.org/TR/webauthn/>

=item L<FIDO::Raw>

A library with a similar purpose, based on Yubico's libfido2

=item L<Authen::U2F>

A library for adding U2F support to server applications

=item L<Crypt::U2F::Server>

A library for adding U2F support to server applications, based on Yubico's libu2f-server

=back
